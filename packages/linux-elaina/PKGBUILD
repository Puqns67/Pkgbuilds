# Maintainer: Puqns67 <me@puqns67.icu>

_major=6
_minor=13
_patch=1
_xanmod=1
_elaina=2

_xanmod_branch='edge'

_to_minor="${_major}.${_minor}"
_to_patch="${_to_minor}.${_patch}"
_to_xanmod="${_to_patch}_xanmod${_xanmod}"

_name='Elaina'
_srcname="linux-${_to_minor}"

pkgbase='linux-elaina'
pkgver="${_to_xanmod}"
pkgrel="${_elaina}"
pkgdesc='Linux kernel for Elaina, based on Xanmod stable and edited some config'
arch=('x86_64')
url='https://www.xanmod.org/'
license=('GPL-2.0-only')
makedepends=('bc' 'clang' 'cpio' 'lld' 'llvm' 'pahole' 'python')
options=('!debug' '!strip')

source=("${_srcname}.tar.xz"::"https://cdn.kernel.org/pub/linux/kernel/v${_major}.x/${_srcname}.tar.xz"
        "${_srcname}.tar.sign"::"https://cdn.kernel.org/pub/linux/kernel/v${_major}.x/${_srcname}.tar.sign"
        "xanmod-patch-${_to_xanmod}.xz"::"https://sourceforge.net/projects/xanmod/files/releases/${_xanmod_branch}/${_to_xanmod//_/-}/patch-${_to_xanmod//_/-}.xz/download"
        'config.bash'
        'elaina.bash')

sha512sums=('1137e6440132b0958f89165440e99208f82b204e7245ae69dc9c808df97d13ce8f58136db92407e0e93394fa7f6283ec7a34597c6e92a5b6d9025e0960357957'
            'SKIP'
            'ef67eac08c617b3998fc285146cbab6ad664136daae197415c2238129fd45d9b4f414c894440c028f7265d4c6d7ddb707e505dbc88410726eac76e80788c3f0d'
            '2dbfce9ec1be85308f2760f930318a8aae290f1cab129faa71271d433707a7cc192bd984fdb2a0c7374d845056a0390a76212427375f6883d61c0fdb94f6d513'
            '50ab1a3fafd61b5baf2951c8afd1626c0a4f9cd95620215808b3bb23d065f28dd2a451dd41a73036ca164a9ab1170f3119142d5e804d551ea4da0f386cfcc926')
b2sums=('9f617ecb3f2393b57ba03c654fea62a7213f24c835989f333a1ef29492af551bfa7d9ad786d5ef1484854adc77c7c6af38fb09a72d994d305695f512c325e77f'
        'SKIP'
        'd5accac81db5ad12f0ec24c1e5402e4c67bbcf2a7a52ffb015e9c9227741dbfc1d7381d3b6b3dea3acbec5c949392abdea30e8cb67eea06468c2b3c46a129af9'
        'af30ef0927a4de2556041472796f85d99bd43d63b1507ccf17e566b642d9278cbfa0c705f40500a04c2f3d0e0af2c24d885309acc7d2481e7e4537a2021bf20f'
        'e5b803320cb8e8b8966824d12f1479e35c0ba37db5ab9e0b3d8f474628b271341ca869cbb2c3803feefeee3525e4b8029ba22697855af535495a8399ba9ee991')

validpgpkeys=('ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linux Torvalds
              '647F28654894E3BD457199BE38DBBDC86092693E') # Greg Kroah-Hartman

export KBUILD_BUILD_HOST='archlinux'
export KBUILD_BUILD_USER="${pkgbase}"
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
export LLVM=1

prepare() {
  cd $_srcname

  msg 'Setting version...'
  echo "-${pkgbase#linux-}${pkgrel}" > localversion.10-pkgbuild

  msg 'Applying xanmod patch..'
  patch -Np1 -i "${srcdir}/xanmod-patch-${_to_xanmod}"

  msg 'Applying config for elaina kernel...'
  source "${srcdir}/elaina.bash"

  msg 'make olddefconfig'
  make -j olddefconfig

  make -s kernelrelease > version
  msg "Prepared %s version %s" "${pkgbase}" "$(<version)"

  # Save configuration for later reuse
  cat .config > "${SRCDEST}/config.last"
}

build() {
  cd $_srcname
  make all
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
}

_package() {
  pkgdesc="The $_name kernel and modules"
  depends=('coreutils' 'initramfs' 'kmod')
  optdepends=('linux-firmware: firmware images needed for some devices')
  provides=('VIRTUALBOX-GUEST-MODULES' 'WIREGUARD-MODULE')

  cd $_srcname
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  msg 'Installing boot image...'
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  msg 'Installing modules...'
  ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm "$modulesdir"/build
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $_name kernel"
  depends=('pahole')

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  msg 'Installing build files...'
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  msg 'Installing headers...'
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  msg 'Installing KConfig files...'
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  msg 'Removing unneeded architectures...'
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    msg2 'Removing %s' $(basename $arch)
    rm -r "$arch"
  done

  msg 'Removing documentation...'
  rm -r "$builddir/Documentation"

  msg 'Removing broken symlinks...'
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  msg 'Removing loose objects...'
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  msg 'Stripping build tools...'
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  msg 'Stripping vmlinux...'
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  msg 'Adding symlink...'
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
