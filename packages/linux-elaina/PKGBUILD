# Maintainer: Puqns67 <me@puqns67.icu>

_major=6
_minor=9
_patch=2
_xanmod=1
_branch=edge

_to_minor="${_major}.${_minor}"
_to_patch="${_to_minor}.${_patch}"
_to_xanmod="${_to_patch}_xanmod${_xanmod}"

_name='Elaina'
_srcname="linux-${_to_minor}"

pkgbase='linux-elaina'
pkgver="${_to_xanmod}"
pkgrel=1
pkgdesc='Linux kernel for Elaina, based on Xanmod stable and edited some config'
arch=('x86_64')
url='https://www.xanmod.org/'
license=('GPL-2.0-only')
makedepends=('bc' 'cpio' 'gettext' 'libelf' 'pahole' 'perl' 'python' 'tar' 'xz')
options=('!debug' '!strip')

source=("linux-${_to_minor}.tar.xz"::"https://cdn.kernel.org/pub/linux/kernel/v${_major}.x/linux-${_to_minor}.tar.xz"
        "linux-${_to_minor}.tar.sign"::"https://cdn.kernel.org/pub/linux/kernel/v${_major}.x/linux-${_to_minor}.tar.sign"
        "xanmod-patch-${_to_xanmod}.xz"::"https://sourceforge.net/projects/xanmod/files/releases/${_branch}/${_to_xanmod//_/-}/patch-${_to_xanmod//_/-}.xz/download"
        'choose-gcc-optimization.bash'
        'config.bash'
        'elaina.bash')

sha512sums=('fed3b4cd1fbfb4d94618587c1934273d2ecc8b6e42a3d586ff8a5f24980be930f2ef803aa2923ca3bfa5e4e619f967f3af315368f24fa76f610b10443624a579'
            'SKIP'
            '34d05b47b0abd45f6ac153681812a3e527a5ea43ac44a05ae07f7bb24c07a204bfd29d193f2c600e8fd0e9aba8b3d90607372b9aa25aa63f000652c49552b436'
            '225017227219809ec19458f3c4a9def7d22c2a6cead53f3b10d7e8e6722ec49ab5905576bffd0c50784dee99648815f5bbc65146c5d2d7bcd82b72b52f498aa7'
            'd9130cfa01319836bb5d506a7a9abc818f49b988705eb2697c36424182fd52c2caa868052c43be0d2aff211d99128c45b199f4f2531e8772a28746d7de3f3dc3'
            '9ee451f4f7312385aa57f87f4924b6e370e120e483ddfe91bc780981183a0f603f3b62e1bf2fda8ec39df429cad6ef34c5d928c736c418024605bf1293b94466')
b2sums=('4cf86c3cfe6e6534745d42dfaeca59b17ea1168c4e8b615c80e6d8aac735f11283cd85fa992b440b5d4452917e94b9f08397a64af0be5894e3df23c68892377e'
        'SKIP'
        'e820e536d206ff8c3c341dc77b35f52d85382510d805f8fafe1bf2d5ff5b1dfd17c4e0d6816d48fc9c087c6558ce935fb43065a65cb620448b7ebdb83c0685b5'
        '72b9fa70c5e3ce27ecc6a5790cd76c0a5b646248e43e990d1df2e43215adfb9d9fb8cce01adef700e39bef8300af367fc0381ab5d0c774f014351d333a11a5db'
        '32187bdf99e86a7758b65110cd20830d65937dab09c0d32982b6d0c8bfabdf0aa453730e17042590f421d608687b38ed230100ad880d53e2833e54199321455b'
        '8d194de80707ea208c43a7728737259a4424bfc9f424e6564393908bb5ec05b449bd30d6edb9aaa853a059dfb82306ae9ad800134d174a9a5156f60c9d876b53')

validpgpkeys=('ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linux Torvalds
              '647F28654894E3BD457199BE38DBBDC86092693E') # Greg Kroah-Hartman

export KBUILD_BUILD_HOST='archlinux'
export KBUILD_BUILD_USER="${pkgbase}"
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd $_srcname

  msg 'Setting version...'
  echo "-${pkgbase#linux-}${pkgrel}" > localversion.10-pkgbuild

  msg 'Applying xanmod patch..'
  patch -Np1 -i "${srcdir}/xanmod-patch-${_to_xanmod}"

  msg 'Applying config for elaina kernel...'
  source "${srcdir}/elaina.bash"

  msg 'make olddefconfig'
  make olddefconfig

  make -s kernelrelease > version
  msg "Prepared %s version %s" "${pkgbase}" "$(<version)"

  # Save configuration for later reuse
  cat .config > "${SRCDEST}/config.last"
}

build() {
  cd $_srcname
  make all
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
}

_package() {
  pkgdesc="The $_name kernel and modules"
  depends=('coreutils' 'initramfs' 'kmod')
  optdepends=('linux-firmware: firmware images needed for some devices')
  provides=('VIRTUALBOX-GUEST-MODULES' 'WIREGUARD-MODULE')

  cd $_srcname
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  msg 'Installing boot image...'
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  msg 'Installing modules...'
  ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm "$modulesdir"/build
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $_name kernel"
  depends=('pahole')

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  msg 'Installing build files...'
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  msg 'Installing headers...'
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  msg 'Installing KConfig files...'
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  msg 'Removing unneeded architectures...'
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    msg2 'Removing %s' $(basename $arch)
    rm -r "$arch"
  done

  msg 'Removing documentation...'
  rm -r "$builddir/Documentation"

  msg 'Removing broken symlinks...'
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  msg 'Removing loose objects...'
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  msg 'Stripping build tools...'
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  msg 'Stripping vmlinux...'
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  msg 'Adding symlink...'
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
