# Maintainer: Puqns67 <me@puqns67.icu>

_major=6
_minor=8
_patch=8
_xanmod=1

_to_minor="${_major}.${_minor}"
_to_patch="${_to_minor}.${_patch}"
_to_xanmod="${_to_patch}_xanmod${_xanmod}"

_name='Elaina'
_srcname="linux-${_to_minor}"

pkgbase='linux-elaina'
pkgver="${_to_xanmod}"
pkgrel=2
pkgdesc='Linux kernel for Elaina, based on Xanmod stable and edited some config'
url='https://www.xanmod.org/'
arch=('x86_64')
license=('GPL-2.0-only')
makedepends=(
  bc
  cpio
  gettext
  libelf
  pahole
  perl
  python
  tar
  xz
)
options=('!debug' '!strip')

source=("linux-${_to_minor}.tar.xz"::"https://cdn.kernel.org/pub/linux/kernel/v${_major}.x/linux-${_to_minor}.tar.xz"
        "linux-${_to_minor}.tar.sign"::"https://cdn.kernel.org/pub/linux/kernel/v${_major}.x/linux-${_to_minor}.tar.sign"
        "patch-${_to_xanmod}.xz"::"https://sourceforge.net/projects/xanmod/files/releases/main/${_to_xanmod//_/-}/patch-${_to_xanmod//_/-}.xz/download"
        'choose-gcc-optimization.bash'
        'config.bash'
        'elaina.bash')

validpgpkeys=('ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linux Torvalds
              '647F28654894E3BD457199BE38DBBDC86092693E') # Greg Kroah-Hartman

sha512sums=('5c4eb4aa1d3f7d1ea01c0f7ddeadacdece6e144fd4bdfc16b2b925d3e10dc04de3a6db69320b79a96c3560052616f001d2c09e7a1bb4f7b731e2380a7ecce068'
            'SKIP'
            '171cb8eeebb1e4173b1914e7dded9f00377965526f40f126bc2e88e62763da47302f2121e27d94fab6f6c11390c8cfc06d0990256c2d0c1fb834476e8ec651f7'
            '225017227219809ec19458f3c4a9def7d22c2a6cead53f3b10d7e8e6722ec49ab5905576bffd0c50784dee99648815f5bbc65146c5d2d7bcd82b72b52f498aa7'
            'b08209c8f186ee95ea70213932fdcb94bdd135350087c9721bf7c823e95b5db95b42b7f4cbe035c6d107207acedf4a40198053e856b78c3ae772cecf65b5ba95'
            'a26360fe6c458e83a2f1b3a4861e09b0f66d341b0aba97147ae54cd840e3ca174804470b38ad06298860373e52fddb5748bc30b1961486330f792ed2a366c42e')
b2sums=('c6f17f816cea16e629f63e9379b98888713f57b2c5173306926471f139a9d612a0c74e119341f8075390e55e203d787d9edeb4ad5a064b18870f6f0f7ffaafb2'
        'SKIP'
        '8185e4346aef07318657cab688577bf6f23ee00d27157cf22244ad150c0b60931f30ccd123abad200b3f746a782d0fb9baf583daedb7c9db242ab47b9aae02df'
        '72b9fa70c5e3ce27ecc6a5790cd76c0a5b646248e43e990d1df2e43215adfb9d9fb8cce01adef700e39bef8300af367fc0381ab5d0c774f014351d333a11a5db'
        '0340eac720488e3703056ba0408600f5786461c4f42f78093ce4f2a90edb1a61b1278f0ab05d633c57483122613b573520ac5e6b96eb8ed9f7b23c88c3008f19'
        '6eff62b73f360e6dee4924a511998b504e62039efa3b9bdf280905517912fef0513da26b794805980d1f6956e10a9a49e7fdca3b15252b891eee9466d3c41f6b')

export KBUILD_BUILD_HOST="archlinux"
export KBUILD_BUILD_USER="${pkgbase}"
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd $_srcname

  msg 'Setting version...'
  echo "-${pkgrel}" > localversion.10-pkgrel
  echo "${pkgbase#linux-elaina}" > localversion.20-pkgname

  msg 'Applying xanmod patch..'
  patch -Np1 -i "${srcdir}/patch-${_to_xanmod}"

  msg 'Applying config for elaina kernel...'
  SRCDIR="${srcdir}" bash "${srcdir}/elaina.bash"

  msg 'make olddefconfig'
  make olddefconfig

  make -s kernelrelease > version
  msg "Prepared %s version %s" "${pkgbase}" "$(<version)"

  # Save configuration for later reuse
  cat .config > "${SRCDEST}/config.last"
}

build() {
  cd $_srcname
  make all
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
}

_package() {
  pkgdesc="The $_name kernel and modules"
  depends=(
    coreutils
    initramfs
    kmod
  )
  optdepends=(
    'linux-firmware: firmware images needed for some devices'
  )
  provides=(
    VIRTUALBOX-GUEST-MODULES
    WIREGUARD-MODULE
  )

  cd $_srcname
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  msg2 "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  msg2 "Installing modules..."
  ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm "$modulesdir"/build
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $_name kernel"
  depends=(pahole)

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  msg2 "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  msg2 "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  msg2 "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  msg2 "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  msg2 "Removing documentation..."
  rm -r "$builddir/Documentation"

  msg2 "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  msg2 "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  msg2 "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  msg2 "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  msg2 "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
